#!/bin/bash

#Copyright (C) 2013, 2014 Robin McCorkell
#Original Copyright (C) 2006  Paul Sharrad

#This file is part of Karoshi Client.
#
#Karoshi Client is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Client is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Client.  If not, see <http://www.gnu.org/licenses/>.

#The Karoshi Team can be contacted either at mpsharrad@karoshi.org.uk or rmccorkell@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

source /opt/karoshi/linuxclientsetup/utilities/common

#Force update time from server
echo "Setting time from $PDC.$DNSSUFFIX"
net time set -S $PDC.$DNSSUFFIX

####################
#Refresh client information
####################
echo "Retrieving client information"
#unset LOCATION
unset PRINTSERVER
unset PROXYSERVER
unset CLIENTSHUTDOWNTIME
unset IDLESHUTDOWNTIME
unset MAILSERVER
IFS=$'\n'
[[ -f /tmp/netlogon/clients/$CLIENTMAC ]] && read -r -d $'\0' _ _ LOCATION _ < /tmp/netlogon/clients/$CLIENTMAC
[[ -f /tmp/netlogon/domain_information/print_server ]] && read -r -d $'\0' PRINTSERVER _ < /tmp/netlogon/domain_information/print_server
[[ -f /tmp/netlogon/domain_information/proxy_server ]] && read -r -d $'\0' PROXYSERVER _ < /tmp/netlogon/domain_information/proxy_server
[[ -f /tmp/netlogon/domain_information/clientshutdowntime ]] && read -r -d $'\0' CLIENTSHUTDOWNTIME _ < /tmp/netlogon/domain_information/clientshutdowntime
[[ -f /tmp/netlogon/domain_information/idletime ]] && read -r -d $'\0' IDLESHUTDOWNTIME _ < /tmp/netlogon/domain_information/idletime
[[ -f /tmp/netlogon/domain_information/mail_server ]] && read -r -d $'\0' MAILSERVER _ < /tmp/netlogon/domain_information/mail_server
unset IFS

####################
#Set apt settings through proxy
####################
if [[ $PROXYSERVER ]]; then
	echo "Configuring APT proxy"
	echo "Acquire::http::Proxy \"http://$PROXYSERVER.$DNSSUFFIX:8000/\";" > /etc/apt/apt.conf.d/01proxy
fi

####################
#Domain specific stuff
####################
echo "Configuring pam_mount"
[[ -e /etc/security/pam_mount.conf.xml ]] && rm -f /etc/security/pam_mount.conf.xml
if ! karoshi-manage-flags get offline_mode >/dev/null; then
	case "$DOMAINTYPE" in
	samba4)
		[[ -f /tmp/netlogon/linuxclient/pam_mount.conf.xml.krb5 ]] && cp -f /tmp/netlogon/linuxclient/pam_mount.conf.xml.krb5 /etc/security/pam_mount.conf.xml
		;;
	*)
		echo "WARNING: Unrecognized domain type $DOMAINTYPE"
		;;
	esac
fi
if [[ ! -f /etc/security/pam_mount.conf.xml ]]; then
	echo "WARNING: No pam_mount configuration file found"
	cat > /etc/security/pam_mount.conf.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<pam_mount>
<debug enable="0" />

</pam_mount>
EOF
fi

#Add offline home entry
[[ -f /etc/security/pam_mount.conf.xml ]] && sed -i "\@</pam_mount>@ i\\
<volume uid='1000-10000000' path='$KAROSHI_DATA/$KAROSHI_OFFLINE_HOMES/users/%(USER)' mountpoint='~/offline-home' options='bind' />" /etc/security/pam_mount.conf.xml

#Add VirtualBox entry
[[ -f /etc/security/pam_mount.conf.xml ]] && sed -i "\@</pam_mount>@ i\\
<volume uid='1000-10000000' path='$KAROSHI_DATA/$KAROSHI_VIRTUALBOX/users/%(USER)' mountpoint='~/.VirtualBox' options='bind' />\\
<volume uid='1000-10000000' path='$KAROSHI_DATA/$KAROSHI_VIRTUALBOX/users/%(USER)' mountpoint='~/VirtualBox VMs' options='bind' />" /etc/security/pam_mount.conf.xml

#################
#Home areas
#################
#tmpfs auto mount
#[[ -f /etc/security/pam_mount.conf.xml ]] && sed -i "0,/[[:blank:]]*<volume/s@@<volume options=\"size=100m,uid=%(USERUID),gid=%(USERGID),mode=0700\" mountpoint=\"~\" uid=\"1000-50000\" fstype=\"tmpfs\" />\n<volume@" /etc/security/pam_mount.conf.xml

#Clear home areas
echo "Clearing /home"
find /home -mindepth 1 -xdev -delete

####################
#Copy configuration
####################
if ! karoshi-manage-flags get no_update_config >/dev/null; then
	echo "Copying configuration"
	[[ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/configuration/ ]] && find /tmp/netlogon/linuxclient/$LINUX_VERSION/configuration -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t /
fi

if ! karoshi-manage-flags get no_update_skel >/dev/null; then
	#Admin skel
	echo "Copying admin skel"
	[[ -e /opt/karoshi/admin-skel ]] && rm -rf /opt/karoshi/admin-skel
	mkdir /opt/karoshi/admin-skel
	if [[ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/admin-skel/ ]]; then
		find /tmp/netlogon/linuxclient/$LINUX_VERSION/admin-skel -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t /opt/karoshi/admin-skel
	elif [[ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/admin_skel/ ]]; then
		find /tmp/netlogon/linuxclient/$LINUX_VERSION/admin_skel -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t /opt/karoshi/admin-skel
	else
		karoshi-manage-flags get offline_mode >/dev/null || echo "WARNING: No admin skel found on server - using default one"
		find /opt/karoshi/linuxclientsetup/admin-skel -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t /opt/karoshi/admin-skel
	fi

	#Do skel (properly)
	if [[ -f /tmp/netlogon/linuxclient/$LINUX_VERSION/skel.tar.gz ]]; then
		echo "Found new skel - replacing existing one"
		[[ -e /etc/skel ]] && rm -rf /etc/skel
		tar -x -C /etc -f /tmp/netlogon/linuxclient/$LINUX_VERSION/skel.tar.gz
	fi
	#/etc/skel should be readable by all, and directories should be 755
	chown -R root:root /etc/skel
	chmod -R +r /etc/skel
	find /etc/skel -type d -print0 | xargs -r0 chmod 755
fi

#Version agnostic configuration
if ! karoshi-manage-flags get no_update_other >/dev/null; then
	echo "Copying other files"
	#Background images
	[[ -d $KAROSHI_DATA/images ]] || mkdir -p "$KAROSHI_DATA"/images
	if [[ -f /tmp/netlogon/linuxclient/background.png ]]; then
		cp -f /tmp/netlogon/linuxclient/background.png "$KAROSHI_DATA"/images
		update-alternatives --install /usr/share/backgrounds/karoshi.png karoshi-background "$KAROSHI_DATA"/images/background.png 50
	fi
	if [[ -f /tmp/netlogon/linuxclient/login-background.png ]]; then
		cp -f /tmp/netlogon/linuxclient/login-background.png "$KAROSHI_DATA"/images
		update-alternatives --install /usr/share/backgrounds/karoshi-login.png karoshi-login-background "$KAROSHI_DATA"/images/login-background.png 50
	fi

	#Clipboard sites for later on
	[[ -f /opt/karoshi/allow_clipboard_sites ]] && rm -f /opt/karoshi/allow_clipboard_sites
	[[ -f /tmp/netlogon/domain_information/allow_clipboard_sites ]] && cp /tmp/netlogon/domain_information/allow_clipboard_sites /opt/karoshi

	#Copy domain CA certificate
	[[ -f /opt/karoshi/cacert.pem ]] && rm -f /opt/karoshi/cacert.pem
	[[ -f /tmp/netlogon/domain_information/cacert.pem ]] && cp /tmp/netlogon/domain_information/cacert.pem /opt/karoshi

	#Static ARPs
	[[ -f /tmp/netlogon/domain_information/static_arps ]] && arp -f /tmp/netlogon/domain_information/static_arps

	#Create GPG keyring for verifying server messages
	[[ -e /opt/karoshi/keyring.gpg ]] && rm -f /opt/karoshi/keyring.gpg
	if [[ -f /tmp/netlogon/linuxclient/server-verify.key ]]; then
		gpg --batch --no-default-keyring --keyring /opt/karoshi/keyring.gpg --import /tmp/netlogon/linuxclient/server-verify.key
	fi

	#Get list of available user web folder servers
	[[ -e /opt/karoshi/user_web_servers ]] && rm -f /opt/karoshi/user_web_servers
	if [[ -f /tmp/netlogon/domain_information/user_web_servers ]]; then
		cp /tmp/netlogon/domain_information/user_web_servers /opt/karoshi
	fi
fi

#######################
#Mozilla extensions
#######################

# Mozilla app IDs
declare -A mozilla_app_id=(
	[firefox]="{ec8030f7-c20a-464f-9b0e-13a3a9e97384}"
	[thunderbird]="{3550f703-e582-4d05-9a08-453d09bdfdc6}"
)

function do_xpi_raw {
	xpi_name=$1
	xpi_dir=$2
	app=$3

	if [[ ! -d /opt/karoshi/mozilla/extensions/$xpi_name ]]; then
		if [[ ! -d $xpi_dir ]]; then
			echo "Error: No such directory $xpi_dir" >&2
			return 1
		fi

		cp -rT "$xpi_dir" /opt/karoshi/mozilla/extensions/"$xpi_name"
	fi

	xpi_id=$(xmlstarlet sel -N rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# -N em=http://www.mozilla.org/2004/em-rdf# \
				-t -m "//rdf:Description[@about='urn:mozilla:install-manifest']" -i "em:id" -v "em:id" --else -v "@em:id" \
				/opt/karoshi/mozilla/extensions/"$xpi_name"/install.rdf)
	#Check if we actually have a valid extension id
	if [[ -z $xpi_id ]]; then
		echo "Warning: Mozilla extension $xpi_name is invalid" >&2
		return
	fi

	#Install extension
	app_id=${mozilla_app_id["$app"]}
	if [[ ! -d /usr/lib/mozilla/extensions/"$app_id" ]]; then
		mkdir -p /usr/lib/mozilla/extensions/"$app_id"
	fi
	ln -Ts /opt/karoshi/mozilla/extensions/"$xpi_name" /usr/lib/mozilla/extensions/"$app_id"/"$xpi_id"
}

function do_xpi {
	xpi_name=$(basename "$1")
	xpi_name=${xpi_name%.xpi}
	app=$2

	if [[ -z $xpi_name ]]; then
		echo "Warning: Something bad happened" >&2
		return
	fi

	temp_dir=$(mktemp -d)

	unzip -q "$1" -d "$temp_dir"
	do_xpi_raw "$xpi_name" "$temp_dir" "$app"

	rm -rf "$temp_dir"
}

[[ -d /opt/karoshi/mozilla/extensions ]] || mkdir -p /opt/karoshi/mozilla/extensions
#Clear all extensions
find /opt/karoshi/mozilla/extensions -mindepth 1 -delete
find /usr/lib/mozilla/extensions/* -maxdepth 1 -lname '/opt/karoshi/mozilla/extensions/*' -delete

# Thunderbird
if [[ $MAILSERVER ]]; then
	# LEGACY compatibility
	find /usr/lib/mozilla/extensions/"${mozilla_app_id[thunderbird]}" -maxdepth 1 -lname '/opt/karoshi/thunderbird/extensions/*' -delete
	[[ -e /opt/karoshi/thunderbird/extensions ]] && rm -rf /opt/karoshi/thunderbird/extensions

	timezone=$(< /etc/timezone)
	mailserver_alias=$(< /tmp/netlogon/domain_information/aliases/"$MAILSERVER")

	#Install SOGo
	do_xpi_raw sogo-connector /opt/karoshi/linuxclientsetup/config-files/thunderbird/sogo-connector thunderbird
	do_xpi_raw sogo-integrator /opt/karoshi/linuxclientsetup/config-files/thunderbird/sogo-integrator thunderbird
	if [[ -d /opt/karoshi/mozilla/extensions/sogo-integrator ]]; then
		sed -i "s@CHANGETHISTIMEZONE@$timezone@" \
			/opt/karoshi/mozilla/extensions/sogo-integrator/defaults/preferences/site.js
		sed -i "s@CHANGETHISSOGO@$mailserver_alias.$DNSSUFFIX@" \
			/opt/karoshi/mozilla/extensions/sogo-integrator/chrome/content/extensions.rdf
	fi
	#Install Firetray
	do_xpi_raw firetray /opt/karoshi/linuxclientsetup/config-files/thunderbird/firetray thunderbird

	if [[ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/thunderbird/extensions ]]; then
		while read -r -d $'\0' xpi; do
			echo "Found new extension: $xpi"
			do_xpi "$xpi" thunderbird
		done < <(find /tmp/netlogon/linuxclient/$LINUX_VERSION/thunderbird/extensions -maxdepth 1 -mindepth 1 -name '*.xpi' -print0)
	fi
fi

# Firefox
#Install Zotero
do_xpi zotero-4.0.22 /opt/karoshi/linuxclientsetup/config-files/firefox/zotero-main firefox
do_xpi Zotero-LibreOffice-Plugin-3.5.9 /opt/karoshi/linuxclientsetup/config-files/firefox/zotero-libreplug firefox

if [[ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/firefox/extensions ]]; then
	while read -r -d $'\0' xpi; do
		echo "Found new extension: $xpi"
		do_xpi "$xpi" firefox
	done < <(find /tmp/netlogon/linuxclient/$LINUX_VERSION/firefox/extensions -maxdepth 1 -mindepth 1 -name '*.xpi' -print0)
fi

###########################
#Create cronjob to shut computer down
###########################
if [[ $CLIENTSHUTDOWNTIME ]] && ! karoshi-manage-flags get no_shutdown >/dev/null; then
	echo "Setting auto shutdown time to $CLIENTSHUTDOWNTIME"
	hours=`cut -d: -f1 <<< "$CLIENTSHUTDOWNTIME"`
	minutes=`cut -d: -f2 <<< "$CLIENTSHUTDOWNTIME"`

	if [[ $hours ]] && [[ $minutes ]]
	then
		echo "SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=\"\"
HOME=/

$minutes $hours * * * /opt/karoshi/scripts/client-shutdown" | crontab -
	fi
fi

###########################
#Configure firewall
###########################
echo "Configuring firewall"

if [[ ! -d /var/lib/karoshi/firewall ]]; then
	mkdir /var/lib/karoshi/firewall
fi

#Copy in rules
if [[ -f /var/lib/karoshi/firewall/domain_rules ]]; then
	rm -f /var/lib/karoshi/firewall/domain_rules
fi
if [[ -f /tmp/netlogon/client_settings/firewall/rules ]]; then
	cp /tmp/netlogon/client_settings/firewall/rules /var/lib/karoshi/firewall/domain_rules
fi

#Legacy local rules support
if [[ -f /opt/karoshi/firewall_rules ]]; then
	mv /opt/karoshi/firewall_rules /var/lib/karoshi/firewall/local_rules
fi

#Firewall settings
karoshi-manage-flags unset firewall_no_ping
karoshi-manage-flags unset firewall_drop_deny

if [[ -f /tmp/netlogon/client_settings/firewall/no_ping ]]; then
	karoshi-manage-flags set firewall_no_ping
fi
if [[ -f /tmp/netlogon/client_settings/firewall/drop_deny ]]; then
	karoshi-manage-flags set firewall_drop_deny
fi

karoshi-generate-firewall-rules

###########################
#Update acceptable_use
###########################
[[ -f /tmp/netlogon/linuxclient/acceptable_use.txt ]] && cp -f /tmp/netlogon/linuxclient/acceptable_use.txt /opt/karoshi/
[[ -f /opt/karoshi/acceptable_use.txt ]] && chmod 0644 /opt/karoshi/acceptable_use.txt

###########################
#Update desktop icons for groups
###########################
if ! karoshi-manage-flags get no_update_icons >/dev/null; then
	echo "Updating desktop icons"
	if [[ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/desktop-icons ]]; then
		[[ -e /opt/karoshi/desktop-icons ]] && rm -rf /opt/karoshi/desktop-icons
		cp -rfT /tmp/netlogon/linuxclient/$LINUX_VERSION/desktop-icons /opt/karoshi/desktop-icons
	elif [[ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/desktop_icons ]]; then
		[[ -e /opt/karoshi/desktop-icons ]] && rm -rf /opt/karoshi/desktop-icons
		cp -rfT /tmp/netlogon/linuxclient/$LINUX_VERSION/desktop_icons /opt/karoshi/desktop-icons
	else
		if ! karoshi-manage-flags get offline_mode >/dev/null; then
			[[ -e /opt/karoshi/desktop-icons ]] && rm -rf /opt/karoshi/desktop-icons
			echo "WARNING: Could not find any desktop icons on server"
		fi
	fi

	if [[ -d /opt/karoshi/desktop-icons ]]; then
		chmod -R 0644 /opt/karoshi/desktop-icons
		chmod -R u+X,g+X,o+X /opt/karoshi/desktop-icons
		while read file; do
			filename="$(tr '[:upper:] ' '[:lower:]-' <<< "$(basename "$file")")"
			mv "$file" "`dirname "$file"`/karoshi-$filename"
		done < <(find /opt/karoshi/desktop-icons/ -name "*.desktop" -and -not -name "karoshi-*.desktop")
	fi
fi

############################
#Printers
############################
if ! karoshi-manage-flags get no_update_printers >/dev/null; then
	echo "Configuring printer configuration files"
	[[ -d /var/lib/karoshi/printing ]] || mkdir /var/lib/karoshi/printing
	find /var/lib/karoshi/printing -mindepth 1 -delete
	#Copy printer configuration
	if [[ $LOCATION ]] && [[ -f /tmp/netlogon/printers.txt ]]; then
		all_printers=`grep ^$LOCATION, /tmp/netlogon/printers.txt`
		if [[ $all_printers ]]; then
			printer_count=`cut -d, -f2 <<< "$all_printers"`
			default_printer=`cut -d, -f$(( printer_count + 3 )) <<< "$all_printers"`
			echo $default_printer > /var/lib/karoshi/printing/list
			for (( i = 3; i < printer_count + 3; ++i )); do
				printer=`cut -d, -f$i <<< "$all_printers"`
				echo "Marking printer $printer to be configured"
				if [[ $printer != $default_printer ]]; then
					echo $printer >> /var/lib/karoshi/printing/list
				fi
				#Copy PPD
				[[ -f /tmp/netlogon/linuxclient/printer_drivers/$printer.ppd ]] && cp -f /tmp/netlogon/linuxclient/printer_drivers/$printer.ppd /var/lib/karoshi/printing/$printer.ppd
			done
		fi
	fi
fi

############################
#Update client
############################
#Use update var so that apt-get only updates once
apt_updated=false
#Only run if flag file is present
if [[ -f /tmp/netlogon/linuxclient/$LINUX_VERSION/enable_updates ]]
then
	karoshi-manage-flags set system_upgrade
else
	karoshi-manage-flags unset system_upgrade
fi

##########################
#Configure virtualbox drive
##########################

function configureVboxPartition {
	#Copy data if required
	if ! [[ $(find "$KAROSHI_DATA"/"$KAROSHI_VIRTUALBOX" -maxdepth 0 -type d -empty 2>/dev/null) ]]; then
		mkdir -p /tmp/karoshi-virtualbox
		mount "$1" /tmp/karoshi-virtualbox
		find "$KAROSHI_DATA"/"$KAROSHI_VIRTUALBOX" -mindepth 1 -maxdepth 1 -print0 | xargs -r0 mv -t /tmp/karoshi-virtualbox
		umount /tmp/karoshi-virtualbox
		rmdir /tmp/karoshi-virtualbox
	fi

	#Write to /etc/fstab
	uuid=$(lsblk -no UUID "$1")
	echo "# karoshi: $KAROSHI_DATA/$KAROSHI_VIRTUALBOX" >> /etc/fstab
	echo "UUID=$uuid	`sed 's/ /\\040/g' <<< "$KAROSHI_DATA"/"$KAROSHI_VIRTUALBOX"`	ext4	defaults,nosuid	0	2" >> /etc/fstab

	mount "$KAROSHI_DATA"/"$KAROSHI_VIRTUALBOX"
}

[[ -d $KAROSHI_DATA/$KAROSHI_VIRTUALBOX ]] || mkdir "$KAROSHI_DATA"/"$KAROSHI_VIRTUALBOX" -m 0755
if ! grep -Eq "^[^[:space:]]+[[:space:]]+$KAROSHI_DATA/$KAROSHI_VIRTUALBOX[[:space:]]" /etc/fstab; then
	vbox_set=false
	#Detect any ext4 partition with a label of KAROSHI-VBOX
	while read -r partition; do
		if [[ $(e2label "$partition" 2>/dev/null) == "KAROSHI-VBOX" ]]; then
			echo "Found existing VirtualBox partition for $KAROSHI_DATA/$KAROSHI_VIRTUALBOX: $partition"
			configureVboxPartition "$partition"
			vbox_set=true
			break
		fi
	done < <(find /dev -maxdepth 1 -name sd??)

	if ! $vbox_set; then
		#Detect any SATA or SCSI drives with no valid partition table
		drive=$(parted -lms 2>/dev/null | sed -n 's@Error: \(/dev/sd.\): unrecognised disk label@\1@p')
		#Detect any SATA or SCSI drives with no partitions
		if ! [[ $drive ]]; then
			drive=$(parted -lms 2>/dev/null | sed -n '/BYT;$/ { n; /^\/dev\/sd./ { h; n; /^$/ { g; s/\([^:]*\):.*/\1/p; q; } } }')
		fi

		if [[ $drive ]]; then
			echo "Detected candidate drive for $KAROSHI_DATA/$KAROSHI_VIRTUALBOX: $drive"
			#Make GPT partition table and single logical partition
			parted -s "$drive" -- mktable gpt
			parted -s -a optimal "$drive" -- mkpart logical 0% 100%
			mkfs.ext4 -L "KAROSHI-VBOX" "$drive"1

			configureVboxPartition "$drive"1
		fi
	fi
fi

##########################
#Miscellaneous things
##########################

#Restrict cron and at to root
echo root > /etc/cron.allow
echo root > /etc/at.allow

#Enable trim support in fstab
for device in /dev/sd*; do
	device_uuid=`blkid $device | sed 's@.*UUID="\([^"]*\)".*@\1@'`
	if [[ $device_uuid ]] && [[ `hdparm -I $device | grep TRIM` ]]; then
		sed -i "/swap\|discard,noatime/!s@\(UUID=$device_uuid[[:blank:]]\+[^[:blank:]]\+[[:blank:]]\+[^[:blank:]]\+[[:blank:]]\+[^[:blank:]]\+\)@\1,discard,noatime@" /etc/fstab
	fi
done

#Write new variables to file
updateVariables
