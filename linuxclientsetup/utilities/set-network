#!/bin/bash

#Copyright (C) 2013, 2014 Robin McCorkell
#Original Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Client.
#
#Karoshi Client is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Client is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Client.  If not, see <http://www.gnu.org/licenses/>.

#The Karoshi Team can be contacted either at mpsharrad@karoshi.org.uk or rmccorkell@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

source /opt/karoshi/linuxclientsetup/utilities/common

netlogon_mount=/tmp/netlogon

if [[ $EUID -ne 0 ]]; then
	echo $"This script must be run as root" >&2
	info_alert $"Karoshi Set Network" $"This script must be run as root"
	exit 1
fi

#Make sure netlogon isn't already mounted
if [[ $(mount | grep "^[^ ]* on $netlogon_mount type cifs") ]]; then
	echo $"$netlogon_mount is already mounted" >&2
	info_alert $"Karoshi Set Network" $"$netlogon_mount is already mounted"
	exit 1
fi

export DEBIAN_FRONTEND=noninteractive

function isWireless {
	[[ -d /sys/class/net/$1/phy80211 ]]
	return $?
}

function isWired {
	[[ $1 =~ ^(eth|lan)[[:digit:]]+ ]]
	return $?
}

function getMac {
	local addr=$(< /sys/class/net/$1/address)
	addr=${addr//:/}
	addr=${addr^^}
	echo "$addr"
}

function getClientSettings {
	echo \#$"Asking for network settings" >&11
	auto_network=false
	while ! $client_settings; do
		#Create network_int_list for use in combo box in yad
		network_int_list=$NETWORKINT
		for i in "${network_ints[@]}"; do
			[[ $i == "$NETWORKINT" ]] && continue
			network_int_list="$network_int_list!$i"
		done
		#Get and set temporary network settings
		understandableYad --form --title $"Karoshi Set Network" --text $"IP Address, Netmask and Gateway are not required if DHCP is selected" --wrap \
							--field=$"Hostname" --field=$"Network Interface":CB --field=$"IP Address" --field=$"Netmask" --field=$"Gateway" --field=$"DHCP":CHK \
							--button='gtk-cancel:1' --button='gtk-ok:0' \
							"$CLIENT_NAME" "$network_int_list" "$IPADDR" "$NETMASK" "$GATEWAY" "$dhcp"
		CLIENT_NAME=`cut -d"|" -f1 <<< "$DATA" | sed 's/ //g'`
		NETWORKINT=`cut -d"|" -f2 <<< "$DATA" | sed 's/ //g'`
		IPADDR=`cut -d"|" -f3 <<< "$DATA"`
		NETMASK=`cut -d"|" -f4 <<< "$DATA"`
		GATEWAY=`cut -d"|" -f5 <<< "$DATA"`
		dhcp=`cut -d"|" -f6 <<< "$DATA" | tr '[:upper:]' '[:lower:]'`
		if [[ -z $CLIENT_NAME ]] || [[ -z $NETWORKINT ]]; then
			info_alert $"Karoshi Set Network" $"You must enter a client name and network interface"
			continue
		fi
		if (( ${#CLIENT_NAME} > 15 )); then
			info_alert $"Karoshi Set Network" $"Client name must be 15 characters or less"
			continue
		fi
		if ! ( $dhcp || ( [[ $IPADDR =~ $IPREGEX ]] && [[ $NETMASK =~ $IPREGEX ]] && [[ $GATEWAY =~ $IPREGEX ]] ) ); then
			info_alert $"Karoshi Set Network" $"You must enter a valid IP address, netmask and gateway, or choose DHCP"
			continue
		fi

		if isWireless $NETWORKINT; then
			understandableYad --form --title $"Karoshi Set Network" --text $"Wireless device configuration" --wrap \
								--field=$"SSID" --field=$"WPA2-PSK Key" \
								--button='gtk-go-back:2' --button='gtk-cancel:1' --button='gtk-ok:0' \
								"$wifi_ssid" "$wifi_key"
			yad_status=$?
			if [[ $yad_status -eq 2 ]]; then
				continue
			fi
			wifi_ssid=`cut -d"|" -f1 <<< "$DATA"`
			wifi_key=`cut -d"|" -f2 <<< "$DATA"`
			if [[ -z $wifi_ssid ]] || [[ -z $wifi_key ]]; then
				info_alert $"Karoshi Set Network" $"You must enter an SSID and key"
				continue
			fi
		fi

		client_settings=true
	done
}

function writeNetworkSettings {
	if $dhcp; then ip_type=dhcp; else ip_type=static; fi
	echo "auto lo
iface lo inet loopback
auto $NETWORKINT
iface $NETWORKINT inet $ip_type" > /etc/network/interfaces

	#If static
	if ! $dhcp; then
		echo "	address $IPADDR
	netmask $NETMASK
	gateway $GATEWAY" >> /etc/network/interfaces
		if [[ $SERVERIP ]]; then
			if [[ $DNSSUFFIX ]]; then
				echo "	dns-search $DNSSUFFIX" >> /etc/network/interfaces
			fi
			echo "	dns-nameservers $SERVERIP" >> /etc/network/interfaces
		else
			echo "	dns-nameservers 8.8.8.8 8.8.4.4" >> /etc/network/interfaces
		fi
	fi

	#If wireless
	if isWireless $NETWORKINT; then
		echo "	wpa-ssid $wifi_ssid
	wpa-psk $wifi_key" >> /etc/network/interfaces
	fi

	#Reconfigure DNS nameservers
	resolvconf -u
}

function updateHostname {
	[[ -z $CLIENT_NAME ]] && return
	if [[ $DNSSUFFIX ]]; then
		hostname=$CLIENT_NAME
		hosts_line="$CLIENT_NAME.$DNSSUFFIX $CLIENT_NAME"
	else
		hostname=$CLIENT_NAME
		hosts_line="$CLIENT_NAME"
	fi
	hostnamectl set-hostname "$hostname"

	if $dhcp; then
		sed -i "/##STATIC##/{ N; d; }" /etc/hosts
		if grep "^127\.0\.1\.1" /etc/hosts; then
			sed -i "s/^127\.0\.1\.1.*/127.0.1.1	$hosts_line/" /etc/hosts
		else
			echo "127.0.1.1	$hosts_line" >> /etc/hosts
		fi
	else
		sed -i "/^127\.0\.1\.1/d" /etc/hosts
		sed -i "/##STATIC##/{ N; d; }" /etc/hosts
		echo "##STATIC##" >> /etc/hosts
		echo "$IPADDR	$hosts_line" >> /etc/hosts
	fi
}

####################
#Detect network interface(s)
####################
network_ints=( )
for int in /sys/class/net/*; do
	int=${int##*/}
	if [[ $int != lo ]]; then
		network_ints+=( "$int" )
	fi
done

for NETWORKINT in "${network_ints[@]}"; do
	isWired $NETWORKINT && break
done
for wifi_network_int in "${network_ints[@]}"; do
	isWireless $wifi_network_int && break
done

####################
#Get network settings
####################
pdc_set=false
manual_pdc=false
client_settings=false
dhcp=false
auto_network=false
[[ ! -d $netlogon_mount ]] && mkdir -p "$netlogon_mount"

#Attempt to guess SERVERIP by DHCP
echo "auto lo
iface lo inet loopback
auto $NETWORKINT
iface $NETWORKINT inet dhcp" > /etc/network/interfaces
exec 11> >(progress_info $"Karoshi Set Network" $"Karoshi Client Setup: Network Configuration")

function exitfunc {
	info_alert $"Karoshi Set Network" $"Configuration cancelled"
	echo 100 >&11
	exit $1
}

echo 5 >&11
echo \#$"Bringing down network interface" >&11
ifdown --force $NETWORKINT
#Clear leases to only get one lease in file
> /var/lib/dhcp/dhclient.$NETWORKINT.leases
echo \#$"Bringing up network interface" >&11
timeout 20 ifup $NETWORKINT
echo 10 >&11
# flag forcesetpdc can be used to prevent automatic pdc guessing for testing purposes
if [[ -s /var/lib/dhcp/dhclient.$NETWORKINT.leases ]] && ! karoshi-manage-flags get forcesetpdc; then
	dhcp=true
	auto_network=true
fi

#Try until we have a DC
while ! $pdc_set; do
	karoshi-manage-flags unset networkset
	unset SERVERIP
	#We define exitfunc further down, so this just resets it
	function exitfunc {
		info_alert $"Karoshi Set Network" $"Configuration cancelled"
		echo 100 >&11
		exit $1
	}
	if $dhcp && [[ -s /var/lib/dhcp/dhclient.$NETWORKINT.leases ]]; then
	#If we have a DHCP lease
		SERVERIP=$(sed -n '/option domain-name-servers / {
			s/.*option domain-name-servers *\([0-9.]*\).*/\1/p; q
			}' /var/lib/dhcp/dhclient.$NETWORKINT.leases)
		NETMASK=$(sed -n '/option subnet-mask / {
			s/.*option subnet-mask *\([0-9.]*\).*/\1/p; q
			}' /var/lib/dhcp/dhclient.$NETWORKINT.leases)
		GATEWAY=$(sed -n '/option routers / {
			s/.*option routers *\([0-9.]*\).*/\1/p; q
			}' /var/lib/dhcp/dhclient.$NETWORKINT.leases)
	elif $dhcp; then
	#If we wanted a DHCP lease
		info_alert $"Karoshi Set Network" $"Did not get DHCP lease"
		dhcp=false
		continue
	else
	#If we didn't get a DHCP lease
		client_settings=false
		echo 5 >&11
		echo \#$"Bringing down network interface" >&11
		ifdown $NETWORKINT
		#Clear leases to only get one lease in file
		> /var/lib/dhcp/dhclient.$NETWORKINT.leases
		getClientSettings
		writeNetworkSettings
		echo \#$"Bringing up network interface" >&11
		timeout 20 ifup $NETWORKINT
		echo 10 >&11

		if $dhcp; then
			#Continue to hit DHCP logic again
			continue
		fi
		if ! arping -f -c 2 $GATEWAY -I $NETWORKINT; then
			info_alert $"Karoshi Set Network" $"Cannot contact gateway $GATEWAY"
			continue
		fi
	fi

	#Update hostname and /etc/hosts
	updateHostname

	#At this point a network has been configured, so the flag is set
	karoshi-manage-flags set networkset

	#exitfunc if the user cancelled selecting a DC
	function exitfunc {
		info_alert $"Karoshi Set Network" $"Not configuring for Karoshi Server"
		karoshi-manage-flags set nokaroshi
		echo 100 >&11
		exit 0
	}

	#Get DC information
	if ! $auto_network; then
		understandableYad --form --title $"Karoshi Set Network" \
						--field=$"IP Address of a Domain Controller" \
						--button=$"Skip":1 --button='gtk-ok:0' \
						"$SERVERIP"
		SERVERIP=`cut -d"|" -f1 <<< "$DATA" | sed 's/ //g'`
		manual_pdc=true
	fi

	echo \#$"Attempting automatic configuration" >&11
	if mount.cifs //$SERVERIP/netlogon "$netlogon_mount" -o guest,nounix; then
		#Only check for automatic network settings if this was not a manual setting
		if ! $manual_pdc; then
			CLIENTMAC=`getMac $NETWORKINT`
			if [[ -f $netlogon_mount/clients/$CLIENTMAC ]] || ( [[ $wifi_network_int ]] && [[ -f $netlogon_mount/clients/`getMac $wifi_network_int` ]] ); then
				pdc_set=true
			else
				pdc_set=false
				dhcp=false
				umount "$netlogon_mount"
			fi
		else
			pdc_set=true
		fi
	else
		$manual_pdc && info_alert $"Karoshi Set Network" $"Invalid Domain Controller"
		pdc_set=false
		dhcp=false
	fi
done

echo 20 >&11
echo \#$"Setting network configuration" >&11

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#At this point it is assumed that a DC can be contacted
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

karoshi-manage-flags unset nokaroshi

#exitfunc to unmount the share, and exit
function exitfunc {
	info_alert $"Karoshi Set Network" $"Configuration cancelled"
	umount "$netlogon_mount"
	echo 100 >&11
	exit $1
}

echo $SERVERIP > /opt/karoshi/serverip

####################
#Pull down server information
####################
current_network_int=$NETWORKINT
#Try the WiFi interface first, since we may be a laptop
temp_network_int=$NETWORKINT
if [[ $wifi_network_int ]]; then
	NETWORKINT=$wifi_network_int
fi
#Get mac address for the iface
CLIENTMAC=`getMac $NETWORKINT`

function pullClientInformation {
	IFS=$'\n'
	read -r -d $'\0' CLIENT_NAME IPADDR LOCATION _ < "$netlogon_mount"/clients/$CLIENTMAC
	unset IFS

	client_settings=true
	dhcp=false
}

if [[ -f $netlogon_mount/clients/$CLIENTMAC ]]; then
	pullClientInformation
else
#We may be here because the WiFi interface did not have a CLIENTMAC entry,
# so go back to the first interface and try again
	NETWORKINT=$temp_network_int
	CLIENTMAC=`getMac $NETWORKINT`
	[[ -f $netlogon_mount/clients/$CLIENTMAC ]] && pullClientInformation
fi

echo 25 >&11

####################
#Final settings for network
####################
function exitfunc {
	info_alert $"Karoshi Set Network" $"Cannot find domain information on server"
	umount "$netlogon_mount"
	echo 100 >&11
	exit $1
}
if [[ -f $netlogon_mount/domain_information/netmask ]]; then NETMASK=` < "$netlogon_mount"/domain_information/netmask`; fi
if [[ -f $netlogon_mount/domain_information/gateway ]]; then GATEWAY=` < "$netlogon_mount"/domain_information/gateway`; fi
if [[ -f $netlogon_mount/domain_information/main_server ]]; then PDC=` < "$netlogon_mount"/domain_information/main_server`; fi
! ( [[ $PDC ]] && [[ $NETMASK =~ $IPREGEX ]] && [[ $GATEWAY =~ $IPREGEX ]] ) && exitfunc 1

function exitfunc {
	info_alert $"Karoshi Set Network" $"Configuration cancelled"
	umount "$netlogon_mount"
	echo 100 >&11
	exit $1
}
#If NETWORKINT is a wireless interface, and don't already have wireless information,
# get wireless information from server
if isWireless $NETWORKINT && ( [[ -z $wifi_ssid ]] || [[ -z $wifi_key ]] ); then
	echo \#$"Checking wireless network settings" >&11
	[[ -f $netlogon_mount/domain_information/wifi_ssid ]] && wifi_ssid=` < "$netlogon_mount"/domain_information/wifi_ssid`
	[[ -f $netlogon_mount/domain_information/wifi_key ]] && wifi_key=` < "$netlogon_mount"/domain_information/wifi_key`
	if [[ -z $wifi_ssid ]] || [[ -z $wifi_key ]]; then
	#Couldn't find wireless information on server, but that's OK
	# because we can just prompt the user for it
		understandableYad --form --title $"Karoshi Set Network" --text="Wireless device configuration" \
							--field=$"SSID" --field=$"WPA2-PSK Key" \
							--button='gtk-cancel:1' --button='gtk-ok:0' \
							"$wifi_ssid" "$wifi_key"
	fi
	echo \#$"Setting network configuration" >&11
fi

echo 30 >&11

#Get network settings from user if not set
getClientSettings

echo 40 >&11

karoshi-manage-flags set networkset

#############
#Domain setup
#############

function reconfigureNetwork {
	echo \#$"Setting network configuration" >&11

	#Do network configuration and remount netlogon
	umount "$netlogon_mount"
	ifdown $current_network_int
	writeNetworkSettings
	updateHostname
	ifup $NETWORKINT
	current_network_int=$NETWORKINT

	#Wait for the network to actually be up
	for i in {1..15}; do
		if ping -c 1 $SERVERIP; then break; fi
		sleep 1
	done

	mount.cifs //$SERVERIP/netlogon "$netlogon_mount" -o guest,nounix
}

DNSSUFFIX="internal"
#Get nsswitch functions
source /opt/karoshi/linuxclientsetup/utilities/nsswitch-funcs

function exitfunc {
	info_alert $"Karoshi Set Network" $"Cannot find domain information on server"
	umount "$netlogon_mount"
	echo 100 >&11
	exit $1
}

echo 50 >&11
echo \#$"Performing domain setup" >&11

if [[ -f $netlogon_mount/domain_information/samba4 ]]; then
	#Using a Samba4 domain
	DNSSUFFIX=` < "$netlogon_mount"/domain_information/dns_domain`
	[[ -z $DNSSUFFIX ]] && exitfunc 1
	#Copy files and change variables
	dns_domain_caps=`tr '[[:lower:]]' '[[:upper:]]' <<< "$DNSSUFFIX"`

	echo 55 >&11
	reconfigureNetwork

	echo 60 >&11
	echo \#$"Copying files" >&11
	cp -rfbS '.karoshi-common~' /opt/karoshi/linuxclientsetup/config-files/common/* /
	cp -rfbS '.karoshi-samba4~' /opt/karoshi/linuxclientsetup/config-files/samba4/* /
	sed -i "s/CHANGETHISREALM/$dns_domain_caps/g" /etc/krb5.conf
	sed -i "s/CHANGETHISDNS/$DNSSUFFIX/g" /etc/ssh/ssh_config

	echo 65 >&11
	echo \#$"Configuring services" >&11

	samba_domain=` < "$netlogon_mount"/domain_information/domain_name`
	[[ -z $samba_domain ]] && exitfunc 1
	DOMAIN=`tr '[[:lower:]]' '[[:upper:]]' <<< "$samba_domain"`
	#Configure smb.conf
	sed -i "s/CHANGETHISDOMAIN/$DOMAIN/g" /etc/samba/smb.conf
	sed -i "s/CHANGETHISREALM/$dns_domain_caps/g" /etc/samba/smb.conf

	#Make sure the time is correct before we join
	net time set -S $PDC.$DNSSUFFIX

	#Join domain
	
	echo 70 >&11
	echo \#$"Joining domain" >&11

	function exitfunc {
		info_alert $"Karoshi Set Network" $"Domain configuration cancelled"
		umount "$netlogon_mount"
		echo 100 >&11
		exit 1
	}

	join_status=1
	while [[ $join_status -ne 0 ]]; do
		understandableYad --form --title=$"Karoshi Set Network" --wrap \
							--text $"Enter credentials to join the domain" --field=$"Username" --field=$"Password":H \
							--button='gtk-cancel:1' --button='gtk-ok:0'
		domain_username=`cut -d"|" -f1 <<< "$DATA"`
		domain_password=`cut -d"|" -f2 <<< "$DATA"`
		net ads join -S $PDC -U $domain_username%$domain_password
		join_status=$?
	done

	echo 75 >&11
	echo \#$"Finalising domain configuration" >&11

	DOMAINTYPE=samba4
	domain_sid=` < "$netlogon_mount"/domain_information/domain_sid`
	ldap_base=` < "$netlogon_mount"/domain_information/ldap_base`
	[[ -z $domain_sid ]] && exitfunc 1
	#Configure sssd.conf
	sed -i "s/CHANGETHISDNS/$DNSSUFFIX/g" /etc/sssd/sssd.conf
	sed -i "s/CHANGETHISLDAPBASE/$ldap_base/g" /etc/sssd/sssd.conf
	sed -i "s/CHANGETHISREALM/$dns_domain_caps/g" /etc/sssd/sssd.conf
	chmod 0600 /etc/sssd/sssd.conf

	#Update nsswitch.conf
	nss_enable passwd sss
	nss_enable group sss
	#Update PAM - bit of a hack, removes the 'seen' entry of the pam
	# module, causing it to be reconfigured into pam.d
	pam-auth-update --package --remove sss sss-password
	pam-auth-update --package
	#Restart sssd
	stop sssd
	start sssd
else
	#Using a Samba3 domain
	info_alert $"Karoshi Set Network" $"This version of Karoshi Client requires Karoshi Server version 9.0 or above"
	umount "$netlogon_mount"
	echo 100 >&11
	exit 1
fi

####################
#End of domain setup
####################

echo 80 >&11
echo \#$"Finalising network configuration" >&11

# Configure DFS support
if [[ -f /tmp/netlogon/domain_information/dfs_enabled ]]; then
	karoshi-manage-flags set dfs_enabled
fi

#Set NTP settings
sed -i "s/### KAROSHI HOOK ###/server $DNSSUFFIX/" /etc/ntp.conf

#Automation steps
if [[ -f $netlogon_mount/domain_information/lockadministrator ]]; then
	karoshi-manage-flags set passwordset
	passwd -l karoshi
	passwd -l root
fi

#Restart networking and finish
echo 90 >&11
umount "$netlogon_mount"
function exitfunc {
	info_alert $"Karoshi Set Network" $"Configuration cancelled"
	echo 100 >&11
	exit $1
}

karoshi-manage-flags set domainset
echo 100 >&11

#Write new variables to file
updateVariables

exit 0

